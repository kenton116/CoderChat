#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('app:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const socket = require('socket.io');
const io = socket(server);
const Quiz = require('../models/quiz');
const dayjs = require('dayjs');
const utc = require('dayjs/plugin/utc')
const timezone = require('dayjs/plugin/timezone')
dayjs.extend(utc)
dayjs.extend(timezone)

let quizContent;
let i = 30;

let iCountUserQuiz = 0;
io.on('connection', (socket) => {
  socket.join('api');
  iCountUserQuiz = iCountUserQuiz+1;
  if(iCountUserQuiz === 1) {
    chooseQuiz();
  }
  io.emit('chat message', '入室しました' , 'info' , iCountUserQuiz);

  socket.on('disconnect', () => {
    socket.leave('api');
    iCountUserQuiz = iCountUserQuiz - 1;
    io.emit('chat message', '退室しました' , 'info' , iCountUserQuiz);
    if(iCountUserQuiz === 0) {
      return i = 60;
    };
  });

  socket.on('chat message', (msg, user, isAnswer) => {
    io.emit('chat message' , msg, user , iCountUserQuiz , isAnswer);
  });

  socket.on('reloaded', () => {
    if(iCountUserQuiz === 1) {
      return i = 0;
    }
  })
});

const sequelize = require('sequelize'); 

function chooseQuiz() {
  Quiz.count().then(() => {
    Quiz.findOne({
      order: sequelize.literal('random()')
    }).then((quiz) => {
      quizContent = [
        { quizId: quiz.quizId },
        { quizName: quiz.quizName },
        { question: quiz.question },
        { answer: quiz.answer },
        { createUser: quiz.createUser },
        { star: quiz.star },
        { tag: quiz.tag }
      ];
      io.to('api').emit('api',JSON.stringify(quizContent));
      const countDown = () => {
        i--;
        io.emit('timer' , i);
        if(1 > i) {
          io.emit('timer' , '答え合わせタイム');
          i = 60;
          return setTimeout(chooseQuiz , 15000);
        }
        if(iCountUserQuiz === 0) {
          return i = 0;
        } else {
          setTimeout(countDown, 1000);
        }
      }
      countDown();
      });
    });
};

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
