#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('app:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const socket = require('socket.io');
const io = socket(server);
const Quiz = require('../models/quiz');
// const { emit } = require('process');
// const { ipAddress } = require('../config');
let chooseQuizId = 0;
let quizContent;

let iCountUserQuiz = 0;
io.on('connection', (socket) => {
  socket.join('api');
  console.log('a user connected');
  iCountUserQuiz = iCountUserQuiz+1;
  chooseQuiz();
  io.emit('chat message', '入室しました' , 'info' , iCountUserQuiz);

  socket.on('disconnect', () => {
    socket.leave('api');
    console.log('user disconnected');
    iCountUserQuiz = iCountUserQuiz - 1;
    io.emit('chat message', '退室しました' , 'info' , iCountUserQuiz);
  });

  socket.on('chat message', (msg, user) => {
    console.log('message:' , msg , user , iCountUserQuiz);
    io.emit('chat message' , msg, user , iCountUserQuiz);
  });
});

function chooseQuiz() {
  if(iCountUserQuiz !== 0) {
  Quiz.count().then(quizCount => {
    chooseQuizId = Math.floor( Math.random() * quizCount + 1);
    console.log(chooseQuizId);
    Quiz.findOne({
      where: {
        quizid: chooseQuizId
      },
    }).then(quiz => {
      quizContent = [
        { quizName: quiz.quizName },
        { question: quiz.question },
        { answer: quiz.answer },
        { creatUser: quiz.createUser },
      ]
      io.to('api').emit('api',JSON.stringify(quizContent));
      console.log(JSON.stringify(quizContent));
      console.log('送信')
      let i = 30;
      const countDown = () => {
        i--;
        io.emit('timer' , i);
        console.log(i)
        if(1 > i) {
          io.emit('timer' , '次の問題に移ります。');
          return setTimeout(chooseQuiz , 3000);
        }
        if(iCountUserQuiz === 0) {
          return i = 0;
        }
        setTimeout(countDown, 1000);
      } 
      countDown();
      });
    });
  } else {
    io.emit('api','');
    return io.emit('timer','');
  }
};

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
